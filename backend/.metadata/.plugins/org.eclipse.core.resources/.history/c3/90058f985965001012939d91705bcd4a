package com.learnnow.service;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.learnnow.dao.UserEntityDao;
import com.learnnow.dto.UserEntityRequestDTO;
import com.learnnow.pojo.UserEntity;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserEntityService {
    	private final UserEntityDao userEntityDao;
    	private final PasswordEncoder passwordEncoder;

    	
        public String signUp(UserEntityRequestDTO dto) {
            UserEntity user = new UserEntity();
            user.setFirstName(dto.getFirstName());
            user.setLastName(dto.getLastName());
            user.setEmail(dto.getEmail());
            user.setPassword(passwordEncoder.encode(dto.getPassword()));
            user.setDob(dto.getDob());
            user.setUserRole(dto.getUserRole());
            user.setActive(true);

            userEntityDao.save(user);
            return "User registered successfully!";
        }
    	
	    public ResponseEntity<?> getUserById(Long id) {
	        Optional<UserEntity> userOpt = userEntityDao.findByIdAndIsActiveTrue(id);
	        return userOpt.map(ResponseEntity::ok)
	                      .orElseGet(() -> ResponseEntity.notFound().build());
	    }

	    public ResponseEntity<?> getAllActiveUsers() {
	        List<UserEntity> users = userEntityDao.findByIsActiveTrue();
	        return ResponseEntity.ok(users);
	    }

	    public ResponseEntity<?> softDeleteUser(Long id) {
	        Optional<UserEntity> userOpt = userEntityDao.findById(id);
	        if (userOpt.isPresent()) {
	            UserEntity user = userOpt.get();
	            user.setActive(false);
	            userEntityDao.save(user);
	            return ResponseEntity.ok("User soft deleted successfully");
	        }
	        return ResponseEntity.notFound().build();
	    }
}
