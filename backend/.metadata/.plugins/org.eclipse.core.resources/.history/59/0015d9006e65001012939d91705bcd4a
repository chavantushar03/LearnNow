package com.learnnow.security;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

import com.learnnow.pojo.UserEntity;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

@Component
public class JwtUtils {
	 @Value("${jwt.secret}")
	    private String jwtSecret;

	    @Value("${jwt.expirationMs}")
	    private int jwtExpirationMs;

	    public String generateToken(UserEntity user) {
	        return Jwts.builder()
	                .setSubject(user.getEmail())
	                .setIssuedAt(new Date())
	                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs))
	                .signWith(SignatureAlgorithm.HS512, jwtSecret)
	                .compact();
	    }

	    public String extractUsername(String token) {
	        return extractClaim(token, Claims::getSubject);
	    }

	    public Date extractExpiration(String token) {
	        return extractClaim(token, Claims::getExpiration);
	    }

	    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
	        final Claims claims = Jwts.parser()
	                                  .setSigningKey(jwtSecret)
	                                  .parseClaimsJws(token)
	                                  .getBody();
	        return claimsResolver.apply(claims);
	    }

	    public boolean validateToken(String token, String userEmail) {
	        final String username = extractUsername(token);
	        return (username.equals(userEmail) && !isTokenExpired(token));
	    }

	    private boolean isTokenExpired(String token) {
	        return extractExpiration(token).before(new Date());
	    }
}
