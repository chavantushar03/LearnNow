package com.learnnow.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.learnnow.dao.UserEntityDao;
import com.learnnow.dto.LoginRequestDTO;
import com.learnnow.dto.LoginResponseDTO;
import com.learnnow.dto.RegisterRequestDTO;
import com.learnnow.dto.UserEntityResponseDTO;
import com.learnnow.pojo.UserEntity;
import com.learnnow.pojo.UserRole;
import com.learnnow.security.JwtUtils;

@Service
public class AuthService {

    @Autowired
    private UserEntityDao userEntityDao;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtils jwtUtils;

    public LoginResponseDTO login(LoginRequestDTO request) {
        UserEntity user = userEntityDao.findByEmailAndIsActiveTrue(request.getEmail())
                .orElseThrow(() -> new BadCredentialsException("Invalid email"));

        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new BadCredentialsException("Invalid password");
        }

        String token = jwtUtils.generateToken(user);
       
        UserEntityResponseDTO userDto = new UserEntityResponseDTO(
                user.getId(),
                user.getFirstName(),
                user.getLastName(),
                user.getEmail(),
                user.getDob(),
                user.getUserRole().name()
            );

            LoginResponseDTO response = new LoginResponseDTO();
            response.setToken(token);
            response.setUser(userDto);
            response.setMessage("Login successful");

        return response;
    }
    
    public LoginResponseDTO register(RegisterRequestDTO request) {
        // Check for existing user
        if (userEntityDao.findByEmailAndIsActiveTrue(request.getEmail()).isPresent()) {
            throw new RuntimeException("User already exists");
        }

        // Create and save new user
        UserEntity user = new UserEntity();
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setDob(request.getDob());
        user.setUserRole(UserRole.valueOf(request.getUserRole().toUpperCase()));
        userEntityDao.save(user);

        // Prepare user DTO
        UserEntityResponseDTO userDto = new UserEntityResponseDTO(
            user.getId(),
            user.getFirstName(),
            user.getLastName(),
            user.getEmail(),
            user.getDob(),
            user.getUserRole().name()
        );

        // Generate token
        String token = jwtUtils.generateToken(user);

        // Prepare response
        LoginResponseDTO response = new LoginResponseDTO();
        response.setToken(token);
        response.setUser(userDto);
        response.setMessage("Registration successful");

        return response;
    }


}
